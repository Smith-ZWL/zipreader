第七章  数据结构（上）  
7.1 概念 
    计算机的应用不再局限于科学计算，更多地用于控制，管理，数据处理等非数值计算的
处理工作。计算机加工处理的对象：数值，字符，表格，图形声音，图象等具有一定结构的
数据。进行程序设计时必须分析待处理的对象的特性及各对象之间存在的关系———产生背
景。 
1.1 什么是数据结构  
计算机解题步骤：建立数学模型——设计解此数学模型的算法——编制程序——进行测
试调整——解答。其中建立数学模型的实质：找出操作对象之间的关系。 
例 1.  图书馆书目检索 ——对应线性关系 
例 2.  博奕树 ——对应树型关系 
例 3.  交叉路口交通灯管理  ——对应图状结构。  
数据结构是一门研究非数值计算的程序设计问题中计算机的操作对象及它们之间的关
系和操作等的学科。（地位）  
1.2 数据结构的基本概念和术语   
1. 数据（Data） 
    数据是描述客观事物的数值、字符以及能输入机器且能被处理的各种符号集合。换句话
说，数据是对客观事物采用计算机能够识别、存储和处理的形式所进行的描述；是计算机加
工处理的对象。包括数值、字符、声音、图像等。  
2. 数据元素（Data Element） 
    数据元素是组成数据的基本单位, 是数据集合的个体，在计算机中通常作为一个逻辑整
体进行考虑和处理。一个数据元素可由若干个数据项组成（Data Item）。 或被称作为记录、
结点或者顶点。 
3. 数据对象（Data Object） 
   数据对象是性质相同的数据元素的集合，是数据的一个子集。例如：整数数据对象是集
合 N={0，±1，±2，…}，字母字符数据对象是集合 C={′A′，′B′，…，′Z′}，表 1-1
所示的学籍表也可看作一个数据对象。由此可看出，不论数据元素集合是无限集（如整数集）、
有限集（如字符集），还是由多个数据项组成的复合数据元素（如学籍表），只要性质相同， 
都是同一个数据对象。  
综上 1~3所述，再分析数据概念：  
  
4.数据结构的形式定义： 
    数据结构是一个二元组 Data_structure=(D,S)。其中：D 为数据结构的有限集，S 是 D
上关系的有限集。 
例：复数结构 Complex=(C,R) 
其中：C为含两个实数的集合{c1,c2}； 
      R={P}，P是集合 C上的一种关系，      
      P={<c1,c2>}，<c1,c2>为有序偶，c1表示复数的实部，c2表示复数的虚部。 
逻辑结构（Data Structure） 
    数据元素相互之间的逻辑关系称为逻辑结构，按划分方式 1，有四种基本结构。 
 (1) 集合结构：结构中的数据元素之间除了同属于一个集合的关系外，无任何其它关系。  
 (2) 线性结构：结构中的数据元素之间存在着一对一的线性关系。  
 (3) 树形结构：结构中的数据元素之间存在着一对多的层次关系。  
 (4) 图状结构或网状结构：结构中的数据元素之间存在着多对多的任意关系。  
 
按划分方式 2，分为线性结构和非线性结构， 
线性结构有且只有一个开始和终端结点，并且所有结点都最多只有一个直接前趋和一个直接
后继。 
线性结构——线性表、栈、队、字符串、数组、广义表 
非线性结构中一个结点可能有多个直接前趋和直接后继。 
非线性结构——树、 图  
 
存储结构 
    存储结构（又称物理结构）是逻辑结构在计算机中的存储映象，是逻辑结构在计算机中
的实现，它包括数据元素的表示和关系的表示。  
形式化描述：D 要存入机器中，建立一从 D 的数据元素到存储空间 M 单元的映象 S，D
→M， 即对于每一个 d，d∈D, 都有唯一的 m∈M，使 S（D）=m,同时这个映象必须明显或隐
含地体现关系 R。  
逻辑结构与存储结构的关系为：存储结构是逻辑关系的映象与元素本身的映象。逻辑
结构是数据结构的抽象，存储结构是数据结构的实现，两者综合起来建立了数据元素之间的
结构关系。  
顺序映象 （顺序存储结构）顺序结构用元素在存储器中的相对位置表示数据元素之间
的逻辑关系，比如 C语言里，一维数组来描述顺序存储结构， 
 
非顺序映象（非顺序存储结构）非顺序映像借助指示元素存储地址的指针表示元素之间
的逻辑关系，比如 C语言里，用指针来描述链式存储结构。   
 
数据结构的内容可归纳为三个部分：逻辑结构、存储结构和运算集合。按某种逻辑关
系组织起来的一批数据，按一定的映象方式把它存放在计算机的存储器中，并在这些数据
上定义了一个运算的集合， 就叫做数据结构。 
  
数据类型(Data Type) 
    数据类型是一组性质相同的值集合以及定义在这个值集合上的一组操作的总称。数据
类型中定义了两个集合，即该类型的取值范围，以及该类型中可允许使用的一组运算，即数
据类型 明显地或者隐含地规定了在程序执行期间变量和表达的所有可能的取值范围，以及
在这些数值范围上所允许进行的操作。例如高级语言中的数据类型就是已经实现的数据结构
的实例。从这个意义上讲，数据类型是高级语言中允许的变量种类，是程序语言中已经实现
的数据结构（即程序中允许出现的数据形式）。在高级语言中，整型类型可能的取值范围是
-32 768~+32 767，可用的运算符集合为加、减、乘、除、取模（如 C语言中+， -， *， /， %）。  
抽象数据类型  
１） 数据的抽象 
    计算机中使用的是二进制数，汇编语言中则可给出各种数据的十进制表示，如 98.65、 
9.6E3 等, 它们是二进制数据的抽象; 使用者在编程时可以直接使用, 不必考虑实现细节。
在高级语言中，则给出更高一级的数据抽象，出现了数据类型， 如整型、 实型、字符型等。
到抽象数据类型出现，可以进一步定义更高级的数据抽象，如各种表、队、栈、树、图、窗
口、管理器等，这种数据抽象的层次为设计者提供了更有利的手段，使得设计者可以从抽象
的概念出发，从整体考虑，然后自顶向下、逐步展开，最后得到所需结果。可以这样看，高
级语言中提供整型、实型、字符、记录、文件、指针等多种数据类型，可以利用这些类型构
造出像栈、队列、树、图等复杂的抽象数据类型。  
２） 抽象数据类型 (Abstract Data Type) 
    抽象数据类型（简称 ADT）是指基于一类逻辑关系的数据类型以及定义在这个类型之上
的一组操作。抽象数据类型的定义取决于客观存在的一组逻辑特性，而与其在计算机内如何
表示和实现无关，即不论其内部结构如何变化，只要它的数学特性不变，都不影响其外部使
用。从某种意义上讲，抽象数据类型和数据类型实质上是一个概念。整数类型就是一个简单
的抽象数据类型实例。“抽象”的意义在于教学特性的抽象。一个 ADT定义了一个数据对象，
数据对象中各元素间的结构关系，以及一组处理数据的操作。ADT 通常是指由用户定义且用
以表示应用问题的数据模型，通常由基本的数据类型组成，并包括一组相关服务操作。  
抽象数据类型是近年来计算机科学中提出的最重要的概念之一，它集中体现了程序设计
中一些最基本的原则：分解、抽象和信息隐藏。  
    一个抽象数据类型确定了一个模型，但将模型的实现细节隐藏起来；它定义了一组运算，
但将运算的实现过程隐藏起来。  
数学模型→抽象数据类型→数据结构，恰好反应了信息结构转换的三个重要阶段，而在
这个转换过程中，数据结构是基础，抽象数据类型是中枢。  
    一个线性表的抽象数据类型的描述如下：  
    ADT          Linear-list 
    数据元素    所有 ai属于同一数据对象，i=1，2，…，n, n≥0； 
    逻辑结构    所有数据元素 ai（i=1，2，…，n-1）存在次序关系<ai，ai+1>，ai无前
趋，an 无后继；  
操作 设 L为 Linear-list: 
       Initial(L): 初始化空线性表; 
       Length(L): 求线性表的表长; 
       Get(L, i): 取线性表的第 i个元素；  
       Insert(L, i, b): 在线性表的第 i个位置插入元素 b；  
       Delete(L, i): 删除线性表的第 i个元素。 
３） 抽象数据类型实现  
第一种情况： 传统的面向过程的程序设计。 
第二种情况： “包”、“模型”的设计方法。 
第三种情况： 面向对象的程序设计（Object Oriented Programming，简称 OOP）。   
４） ADT的形式定义 
    ADT的定义格式不唯一, 我们采用下述格式定义一个 ADT:  
   ADT  抽象数据类型名{ 
         数据对象: <数据对象的定义> 
         数据关系: <结构关系的定义> 
         基本操作: <基本操作的定义>   
} 
ADT   抽象数据类型名  
其中数据对象和结构关系的定义采用数学符号和自然语言（伪代码）描述, 而基本操作
的定义格式为:  
       操作名称  (参数表) 
       初始条件:  <初始条件描述> 
       操作结果:  <操作结果描述>  
关于参数传递 
    参数表中的参数有两种：第一种参数只为操作提供待处理数据, 又称值参；第二种参数
既能为操作提供待处理数据, 又能返回操作结果，也称变量参数。操作前提描述了操作执行
之前数据结构和参数应满足的条件, 操作结果描述操作执行之后, 数据结构的变化状况和
应返回结果。ADT 可用现有计算机语言中已有的数据类型, 即固有数据类型来表示和实现。
不同语言的表示和实现方法不尽相同，如 ADT 中“返回结果的参数”，PASCAL 语言用“变
参” 实现, C++语言通过“引用型参数”实现, 而 C语言用“指针参数”实现。  
用标准 C语言表示和实现 ADT描述时，主要包括以下两个方面:  
    (1) 通过结构体将 int、float等固有类型组合到一起,构成一个结构类型,再用 typedef
为该类型或该类型指针重新起一个名字。  
    (2) 用 C语言函数实现各操作。  
基本操作主要有以下几种：  
    (1) 插入： 在数据结构中的指定位置上增添新的数据元素；  
    (2) 删除： 删去数据结构中某个指定数据元素；  
    (3) 更新： 改变数据结构中某个元素的值， 在概念上等价于删除和插入操作的组合；  
    (4) 查找： 在数据结构中寻找满足某个特定要求的数据元素（的位置和值)；  
    (5) 排序： （在线性结构中）重新安排数据元素之间的逻辑顺序关系，使数据元素按
值由小到大或由大到小的次序排列。  
结构化的开发方法与面向对象的开发方法的不同点，结构化的开发方法是面向过程的开
发方法， 首先着眼于系统要实现的功能。从系统的输入和输出出发， 分析系统要实现的功
能，用自顶向下、逐步细化的方式建立系统的功能结构和相应的程序模块结构。一旦程序功
能需要修改， 就会涉及多个模块，修改量大，易于出错，并会引起程序的退化。  
 
7.2 线性表 
线性结构的特点： 
在数据元素的非空有限集中， 
•   存在唯一的一个被称为“第一个”的数据元素； 
•   存在唯一的一个被称为“最后一个”的数据元素； 
•   除第一个元素之外，集合中的每个元素均只有一个前驱； 
•   除最后一个元素之外，集合中的每个元素均只有一个后继。  
 
2.1 线性表的类型定义 
2.1.1 线性表的逻辑结构 
线性表(Linear List)是由 n (n≥0)个类型相同的数据元素 a1, a2, …， an组成的有
限序列，记作（a1, a2, …，ai-1，ai，ai+1， …，an）。这里的数据元素 ai(1≤i≤n)
只是一个抽象的符号，其具体含义在不同情况下可以不同， 它既可以是原子类型，也可以
是结构类型但同一线性表中的数据元素必须属于同一数据对象。此外，线性表中相邻数据元
素之间存在着序偶关系，即对于非空的线性表（a1, a2, …，ai-1, ai, ai+1,  …, an）， 
表中 ai-1 领先于 ai，称 ai-1 是 ai的直接前驱，而称 ai是 ai-1的直接后继。除了第一
个元素 a1 外，每个元素 ai 有且仅有一个被称为其直接前驱的结点 ai-1，除了最后一个元
素 an外，每个元素 ai有且仅有一个被称为其直接后继的结点 ai+1。 线性表中元素的个数
n被定义为线性表的长度，n=0时称为空表。  
 
例如： 英文字母表(A, B, …, Z)就是一个简单的线性表，表中的每一个英文字母是一
个数据元素， 每个元素之间存在唯一的顺序关系，如在英文字母表字母 B的前面是字母 A， 
而字母 B 的后面是字母 C。 在较为复杂的线性表中，数据元素(data elements ) 可由若
干数据项组成，如学生成绩表中，每个学生及其各科成绩是一个数据元素，它由学号、姓名、
各科成绩及平均成绩等数据项(item) 组成， 常被称为一个记录(record) ，含有大量记录
的线性表称为文件(file)。数据对象（data object）是性质相同的数据元素集合。  
表 2-1  车辆登记表 
 
线性表的特点可概括如下：  
    同一性：线性表由同类数据元素组成，每一个 ai必须属于同一数据对象。  
    有穷性：线性表由有限个数据元素组成， 表长度就是表中数据元素的个数。  
    有序性：线性表中表中相邻数据元素之间存在着序偶关系<ai, ai+1>。  
由此可看出，线性表是一种最简单的数据结构，因为数据元素之间是由一前驱一后继的
直观有序的关系确定；线性表又是一种最常见的数据结构，因为矩阵、数组、字符串、堆栈、 
队列等都符合线性条件。 
2.2  线性表的顺序表示和实现  
2.2.1 线性表的顺序存储结构  
线性表的顺序存储是指用一组地址连续的存储单元依次存储线性表中的各个元素，使得
线性表中在逻辑结构上相邻的数据元素存储在相邻的物理存储单元中，即通过数据元素物理
存储的相邻关系来反映数据元素之间逻辑上的相邻关系。 采用顺序存储结构的线性表通常
称为顺序表。 
假设线性表中有 n个元素，每个元素占 k个单元，第一个元素的地址为 loc(a1)，则可
以通过如下公式计算出第 i个元素的地址 loc(ai)：  
                        loc(ai) =loc(a1)+(i-1)×k 
其中 loc(a1)称为基地址。 
    它是一种随机存取的数据结构。   
 
顺序存储结构可以借助于高级程序设计语言中的一堆数组来表示，一维数组的下标与元素在
线性表中的序号相对应(C语言中下标等于序号减 1）。  
由上面的讨论可知， 线性表顺序表示的优点是：  
(1）无需为表示结点间的逻辑关系而增加额外的存储空间（因为逻辑上相邻的元素其存储的
物理位置也是相邻的）；  
(2）可方便地随机存取表中的任一元素。  
其缺点是：   
    插入或删除运算不方便，除表尾的位置外，在表的其它位置上进行插入或删除操作都必
须移动大量的结点，其效率较低。 
    由于顺序表要求占用连续的存储空间，存储分配只能预先进行静态分配，因此当表长变
化较大时，难以确定合适的存储规模。若按可能达到的最大长度预先分配表空间，则可能造
成一部分空间长期闲置而得不到充分利用；若事先对表长估计不足，则插入操作可能使表长
超过预先分配的空间而造成溢出。 
 
2.3  线性表的链式表示和实现  
2.3.1 单链表 
线性表的链式存储：用一组任意的存储单元存放线性表的数据元素（这组存储单元可以连续，
也可不连续）。为表示数据元素之间的逻辑关系，还需有存储一个指示后继的信息——指针。
由数据域和指针域构成数据元素的存储映象，称为结点（Node）。  
 
单链表包括两个域：数据域用来存储结点的值；指针域用来存储数据元素的直接后继的
地址（或位置）。链表正是通过每个结点的指针域将线性表的 n个结点按其逻辑顺序链接在
一起。由于链表的每个结点只有一个指针域，故将这种链表又称为单链表。 
    由于单链表中每个结点的存储地址是存放在其前趋结点的指针域中的，而第一个结点无
前趋，因而应设一个头指针 H指向第一个结点。同时，由于表中最后一个结点没有直接后继，
则指定线性表中最后一个结点的指针域为“空”（NULL）。这样对于整个链表的存取必须从
头指针开始。  
例如：图 2.5 所示为线性表（A, B, C, D, E, F, G, H）的单链表存储结构，整个链表
的存取需从头指针开始进行，依次顺着每个结点的指针域找到线性表的各个元素。  
 
图 2.5单链表的示例图 
 
图 2.6 单链表的逻辑状态 
 
图 2.7  带头结点单链表图示 
单链表可以由头指针唯一确定。 
2.3.3 循环链表  
循环链表(Circular Linked List)是单链表的另一种形式，它是一个首尾相接的链表。
其特点是将单链表最后一个结点的指针域由 NULL 改为指向头结点或线性表中的第一个结点，
就得到了单链形式的循环链表，并称为循环单链表。类似地，还有多重链的循环链表。 在
循环单链表中，表中所有结点都被链在一个环上，多重循环链表则是将表中的结点链在多个
环上。为了使某些操作实现起来方便，在循环单链表中也可设置一个头结点。 这样，空循
环链表仅由一个自成循环的头结点表示。  
 
图 2.12  带头结点循环单链表 
2.3.4 双向链表 
    循环单链表的出现，虽然能够实现从任一结点出发沿着链能找到其前驱结点，但时间耗
费是 O(n) 。如果希望从表中快速确定某一个结点的前驱，另一个解决方法就是在单链表的
每个结点里再增加一个指向其前驱的指针域 prior。 这样形成的链表中就有两条方向不同
的链，我们可称之为双(向)链表(Double Linked List)。 
 
2.3.6  顺序表和链表的比较  
1. 基于空间的考虑  
在链表中的每个结点，除了数据域外，还要额外设置指针（或光标）域， 从存储密度
来讲，这是不经济的。所谓存储密度(Storage Density), 是指结点数据本身所占的存储量
和整个结点结构所占的存储量之比， 即 
存储密度=结点数据本身所占的存储量/结点结构所占的存储总量 
一般地，存储密度越大，存储空间的利用率就越高。显然，顺序表的存储密度为 1，而
链表的存储密度小于 1。例如单链表的结点的数据均为整数，指针所占空间和整型量相同，
则单链表的存储密度为 50%。因此若不考虑顺序表中的备用结点空间， 则顺序表的存储空
间利用率为 100%，而单链表的存储空间利用率为 50%。由此可知，当线性表的长度变化不大， 
易于事先确定其大小时，为了节约存储空间，宜采用顺序表作为存储结构。  
2. 基于时间的考虑  
    顺序表是由向量实现的，它是一种随机存取结构，对表中任一结点都可以在 O(1)时间
内直接地存取，而链表中的结点， 需从头指针起顺着链找才能取得。 因此， 若线性表的
操作主要是进行查找，很少做插入和删除时，宜采用顺序表做存储结构。 
    在链表中的任何位置上进行插入和删除，都只需要修改指针。而在顺序表中进行插入和
删除，平均要移动表中近一半的结点，尤其是当每个结点的信息量较大时，移动结点的时间
开销就相当可观。因此，对于频繁进行插入和删除的线性表， 宜采用链表做存储结构。若
表的插入和删除主要发生在表的首尾两端， 则宜采用尾指针表示的单循环链表。  
3. 基于语言的考虑  
    对于没有提供指针类型的高级语言，若要采用链表结构， 则可以使用光标实现的静态
链表。虽然静态链表在存储分配上有不足之处，但它和动态链表一样，具有插入和删除方便
的特点。  
    值得指出的是，即使是对那些具有指针类型的语言，静态链表也有其用武之地。特别是
当线性表的长度不变，仅需改变结点之间的相对关系时，静态链表比动态链表可能更方便。  
 
7.3 栈和队列 
3.1  栈  
3.1.1  栈的定义 
        栈作为一种限定性线性表，是将线性表的插入和删除运算限制为仅在表尾进行，通
常将表中允许进行插入、删除操作的一端称为栈顶(Top)，因此栈顶的当前位置是动态变化
的，它由一个称为栈顶指针的位置指示器指示。同时表的另一端被称为栈底(Bottom)。当栈
中没有元素时称为空栈。栈的插入操作被形象地称为进栈或入栈，删除操作称为出栈或退栈。 
设 S=(a1,a2,…,an)表示栈，则 a1 为栈底元素，an 为栈顶元素。栈是一种后进先出（Last 
In First Out）的线性表（简称 LIFO 结构）。 
   栈只能对栈顶元素进行插入和删除操作。 
 
 
3.1.2 栈的表示和实现  
1. 顺序栈 
顺序栈是用顺序存储结构实现的栈，即利用一组地址连续的存储单元依次存放自栈底到
栈顶的数据元素，同时由于栈的操作的特殊性， 还必须附设一个位置指针 top（栈顶指针）
来动态地指示栈顶元素在顺序栈中的位置。通常以 top=0表示空栈。顺序栈的存储结构可以
用 C语言中的一维数组来表示。 
3.3  栈与递归的实现  
栈非常重要的一个应用是在程序设计语归函数 
例如， 很多数学函数是递归定义的， 如二阶 Fibonacci数列：  
 
 
递归过程的实现 
    一个函数调用另一个函数时，在运行被调用函数之前，系统做的工作有：   
       (1) 保留本层参数与返回地址（将所有的实在参数、 返回地址等信息传递给被调用
函数保存）；  
       (2) 给下层参数赋值（为被调用函数的局部变量分配存储区）；  
       (3) 将程序转移到被调函数的入口。  
而从被调用函数返回调用函数之前，系统也应完成三件工作：  
       (1) 保存被调函数的计算结果；  
       (2) 恢复上层参数（释放被调函数的数据区）；  
       (3) 依照被调函数保存的返回地址， 将控制转移回调用函数。  
    当多个函数调用时按后调用先返回的原则。  
例  求 n的阶乘 
＃include <stdio.h> 
lang fac(int n) 
{ lang L; 
   if(!n)  L=1; 
   else  L=n*fac(n-1); 
   return L; 
}       
int  main() 
{  int n; 
    lang L; 
    scanf(“%d”,&n); 
    L=fac(n); 
    printf(“%ld”,L); 
}  
 
3.4   队  列 
3.4.1  队列的定义 
        队列 (Queue)是另一种限定性的线性表，它只允许在表的一端插入元素，而在另一
端删除元素，所以队列具有先进先出(Fist In Fist Out， 缩写为 FIFO)的特性。在队列中，
允许插入的一端叫做队尾(rear)，允许删除的一端则称为队头(front)。 假设队列为 q=(a1，
a2，…，an)，那么 a1就是队头元素，an则是队尾元素。队列中的元素是按照 a1，a2，…，
an的顺序进入的， 退出队列也必须按照同样的次序依次出队，也就是说，只有在 a1，a2，…，
an-1都离开队列之后，an才能退出队列。  
 
 
数据元素：可以是任意类型的数据，但必须属于同一个数据对象。  
关系： 队列中数据元素之间是线性关系。  
基本操作：  
     （1） InitQueue(&Q)：  初始化操作。设置一个空队列。  
     （2） QueueEmpty(Q)：  判空操作。若队列为空， 则返回 TRUE，否则返回 FALSE。  
     （3）EnQueue(&Q，e)：  进队操作。在队列 Q的队尾插入 e。  
（4）DeQueue(&Q,&e)：  出队操作。使队列 Q的队头元素出队， 并用 e带回其值。  
     （5） ClearQueue(&Q)：  队列置空操作。 将队列 Q置为空队列。  
     （6） DestroyQueue(&Q)：  队列销毁操作。 释放队列的空间。  
 
 
7.4 串 
4.1  串的定义  
串(String)是零个或多个字符组成的有限序列。 一般记为：  
                   S= ′a1a2...an′ (n≥0) 
    其中 S 是串的名字, 用单引号括起来的字符序列是串的值，ai(1≤i≤n)可以是字母、
数字或其它字符。n是串中字符的个数, 称为串的长度，n=0时的串称为空串 (Null String)。  
串中任意个连续的字符组成的子序列称为该串的子串。 包含子串的串相应地称为主串。
通常将字符在串中的序号称为该字符在串中的位置。子串在主串中的位置则以子串的第一个
字符在主串中的位置来表示。  
    假串 A=′China Beijing′, B=′Beijing′, C=′China′, 则它们的长度分别为 13、
7和 5。B和 C是 A的子串, B在 A中的位置是 7,  C在 A中的位置是 1。  
    当且仅当两个串的值相等时,称这两个串是相等的，即两个串的长度相等, 且每个对应
位置的字符都相等时才相等。  
串值必须用一对单引号括起来，但单引号本身不属于串，它的作用只是为了避免与变量
名或数的常量混淆而已。 
    在各种应用中，空格常常是串的字符集合中的一个元素，因而可以出现在其它字符中间。
由一个或多个空格组成的串‘ ’称为空格串（blank string ,请注意：此处不是空串）。
它的长度为串中空格字符的个数。为了清楚起见，以后我们用符号“Ø”来表示“空串”。
串的逻辑结构和线性表极为相似，区别仅在于串的数据对象约束为字符集。 串的逻辑结构
和线性表极为相似，区别仅在于串的数据对象约束为字符集。  
7.5 数组和广义表 
 
5.1 数组的定义  
 
数组和广义表可看成是一种特殊的线性表，其特殊在于，表中的数据元素本身也是一种
线性表。 
    数组是我们最熟悉的数据类型，在早期的高级语言中，数组是唯一可供使用的数据类型。
由于数组中各元素具有统一的类型，并且数组元素的下标一般具有固定的上界和下界，因此，
数组的处理比其它复杂的结构更为简单。多维数组是向量的推广。例如，二维数组：可以看
成是由个行向量组成的向量，也可以看成是个列向量组成的向量。 
    在 C语言中，一个二维数组类型可以定义为其分量类型为一维数组类型的一维数组类型，
也就是说， 
          typedef  elemtype  array2[m][n];  等价于： 
          typedef elemtype array1[n]; 
          typedef  array1 array2[m]; 
    同理，一个维数组类型可以定义为其数据元素为维数组类型的一维序组类型。数组一旦
被定义，它的维数和维界就不再改变。因此，除了结构的初始化和销毁之外，数组只有存取
元素和修改元素值的操作。 
 
图  矩阵 Am×n看成 n个列向量的线性表 
 
图  矩阵 Am×n看成 m个行向量的线性表 
以上我们以二维数组为例介绍了数组的结构特性，实际上数组是一组有固定个数的元素
的集合。也就是说，一旦定义了数组的维数和每一维的上下限，数组中元素的个数就固定了。 
例如二维数组 A3×4，它有 3行、4列，即由 12个元素组成。由于这个性质，使得对数组的
操作不像对线性表的操作那样可以在表中任意一个合法的位置插入或删除一个元素。对于数
组的操作一般只有两类：  
       (1） 获得特定位置的元素值；  
       (2） 修改特定位置的元素值。  
 
基本操作：  
   （1） InitArray(&A, n, bound1, …, boundn)： 若维数 n和各维的长度合法，则构造
相应的数组 A，并返回 TRUE。 
   （2） DestroyArray（&A）： 销毁数组 A。 
   （3） Value（A，&e, index1,  …, indexn）： 若下标合法，则用 e返回数组 A中由
index1,  …, indexn 所指定的元素的值。  
   （4） Assign(&A,e,indexl,…indexn)：若各下标不超界，则将 e 赋值为所指定的 A的
元素值，并返回 OK。  
n 维数组中每个元素都受着 n 个关系的约束，在每个关系中，元素 aj1j2…jn(0≤ji≤
bi-2)都有一个直接后继元素。因此，就其单个关系而言，这 n 个关系仍是线性关系。所有
数据元素必须属于同一数据类型。 
    数组的每个元素都对应于一组下标（j1,j2,…jn）,其中每个下标的取值范围是 0≤ji
≤bi-1 ,bi称为第 i维的长度。当 n=1时，n维数组就退化为定长的线性表。由此，n维数
组是线性表的扩广。  
5.4  广 义 表  
广义表，顾名思义，也是线性表的一种推广。广义表被广泛地应用于人工智能等领域的
表处理语言 LISP 语言中。在 LISP 语言中，广义表是一种最基本的数据结构，就连 LISP 语
言的程序也表示为一系列的广义表。  
广义表一般记作 LS= ( a1,a2,…,an ) 
    其中 LS 是广义表(a1,a2,…,an ) 的名称，n 称为广义表的长度，在线形表中 ai是单
个元素，而在广义表中 ai 可以是单个元素，也可以是广义表，分别称 LS 的原子或子表，
通常用大写表示广义表名称，小写表示元素。 
    当广义表非空时，第一个元素 a1称为 LS的表头( Head )，其余元素 （a2,…,an ）是
LS的表尾（Tail ）。显然广义表是一个递归定义。  
· D=（）空表；其长度为零。 
· A=（a， （b， c）） 表长度为 2 的广义表，其中第一个元素是单个数据 a，第二个元
素是一个子表（b，c）。  
· B=（A， A， D）    长度为 3的广义表， 其前两个元素为表 A， 第三个元素为空表 D。 
· C=（a，C）    长度为 2递归定义的广义表，C相当于无穷表 C=（a，（a,（a，（…））））。  
其中，A、B、C、D是广义表的名字。 下面以广义表 A为例， 说明求表头、 表尾的操
作：  
    head（A）=a           表 A的表头是 a。 
tail（A）=（（b， c））     表 A的表尾是（（b， c））。  
广义表的表尾一定是一个表。  
从上面的例子可以看出：  
   （1） 广义表的元素可以是子表，而子表还可以是子表……由此可见，广义表是一个多
层的结构。  
   （2） 广义表可以被其它广义表共享，如广义表 B 就共享表 A。 在表 B 中不必列出表 A
的内容，只要通过子表的名称就可以引用该表。  
   （3） 广义表具有递归性， 如广义表 C。 
    任何一个非空列表，表头可以是原子列表，表尾一定是列表 。注：（ ）与（（））不
同，前者长度 n=0； 后者长度 n=1   
5．5  广义表的存储结构 
    由于广义表中数据元素可以是具有不同的结构，通常采用链式存储结构。 
 
 
图  广义表 A、B、C、D的存储结构 
 
图   广义表的另一种结点结构 
 
 
真题回顾 
 
（2014 年真题 单选题 第 59 题）对于带表头结点的单链表，若其头指针为 p，p->link 为 p
所指结点的链域，则判定该单链表为空的条件是（   ） 
A.p->link->link==NULL    B.p->link==NULL 
C.p==NULL             D.p!==NULL 
 
（2014 年真题 多选题 第 80 题）数据结构中，单链表的特点有（   ） 
A.插入、删除操作不需要移动元素   
B.所需空间与链表长度成正比 
C.不必事先估计存储空间 
D.可随机访问任一元素 
 
（2017 年上半年真题 多选题 第 75 题）线性结构是有限个同类型的数据元素构成，除第一
个和最后一个元素外，每个元素有且仅有一个直接前驱和一个直接后驱，常用的线性数据结
构有（）。 
A.线性表   B. 堆栈   C. 队列   D.树 
 
 
（2017 年下半年真题 单选题 第 70 题）下列最适合解决哥尼斯堡七桥问题的抽象数据类型
是（ 
A.线性类    B.树    C.队列   D.图 
 
 
 
复习题 
（1）什么是数据结构？它包括哪些要素？ 
（2）线性的数据结构包括哪些？它的主要特点是什么？ 
（3）线性表是什么样的数据序列？它的链式表示和实现是如何完成的。 
（4）栈和队列的区别是什么？ 
（5）什么是串？空格串和空串的区别是什么？ 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
复习题答案 
（1）什么是数据结构？它包括哪些要素？ 
答：按某种逻辑关系组织起来的一批数据，按一定的映象方式把它存放在计算机的存储
器中，并在这些数据上定义了一个运算的集合，就叫做数据结构。  
它包括数据（Data）、数据元素（Data Element）、数据对象（Data Object）、数据
的逻辑结构和物理结构等。 
 
（2）线性的数据结构包括哪些？它的主要特点是什么？ 
答：线性结构——线性表、栈、队、字符串、数组、广义表 
线性结构有且只有一个开始和终端结点，并且所有结点都最多只有一个直接前趋和一个直接
后继。 
 
（3）线性表是什么样的数据序列？它的链式表示和实现是如何完成的。 
答：线性表是 n个数据元素的有限序列，同一线性表中的元素必定具有相同特性，相阾的数
据元素之间存在着序偶关系。 
链式存储结构不要求逻辑上相邻的元素在物理位置上也相邻，因此它没有顺序存储结构
所有具有的缺点，但同时也失去了顺序存储结构可随机存取的优点。 
链式存储结构的特点是元素可以使用存储内存中的任何位置（可以是连续的，也可以不
连续），元素 a[i]和 a[i+1]的逻辑关系不依靠相对位置，而是元素中增加一个指示其后继
元素的数据（元素指针），元素本身的数据+后继信息构成了存储映像，俗称节点(node)。 
 
（4）栈和队列的区别是什么？ 
答：队列（Queue）：是限定只能在表的一端进行插入和在另一端进行删除操作的线性表； 
栈（Stack）：是限定只能在表的一端进行插入和删除操作的线性表。 
区别如下： 
一、规则不同 
1. 队列：先进先出（First In First Out）FIFO 
2. 栈：先进后出（First In Last Out ）FILO 
二、对插入和删除操作的限定不同 
1. 队列：只能在表的一端进行插入，并在表的另一端进行删除； 
2. 栈：只能在表的一端插入和删除。 
三、遍历数据速度不同 
1. 队列：基于地址指针进行遍历，而且可以从头部或者尾部进行遍历，但不能同时遍历，
无需开辟空间，因为在遍历的过程中不影响数据结构，所以遍历速度要快； 
2. 栈：只能从顶部取数据，也就是说最先进入栈底的，需要遍历整个栈才能取出来，而且
在遍历数据的同时需要为数据开辟临时空间，保持数据在遍历前的一致性。 
 
（5）什么是串？空格串和空串的区别是什么？ 
答：串是有限的字符序列,从数据结构角度讲,串属于线性结构。与线性表的不同之处在于串
的元素是字符。 
空串是不含任何字符的串,其长度为 0。 
空格是一个字符,其 ASCII码值是 32。空格串是由空格组成的串,其长度等于空格的个数。 
